/**
 * This file is part of the BlockLotto core functionality.
 * 
 * DO NOT EDIT THIS FILE DIRECTLY.
 * Any changes to this file may cause unexpected behavior.
 * Please consult the project maintainers before making modifications.
*/

import React, { createContext, useContext, useEffect, useState } from "react";
import {
    useHistory,
    useLocation
} from 'react-router-dom';

// core components
import { useBlockLotto } from '@core/context/BlockLotto';

export const AppContext = createContext();

export const AppProvider = ({ children }) => {
    const history = useHistory();
    const location = useLocation();

    const { wallet, loading } = useBlockLotto();
    const [loadingStatus, setLoadingStatus] = useState(false);
    const [loader, setLoader] = useState(true);
    const [playerNumbers, setPlayerNumbers] = useState(false);
    const [activeTicket, setActiveTicket] = useState(false);
    const [payout, setPayout] = useState(false);
    const [protection, setProtection] = useState(true);
    const [redeemAll, setRedeemAll] = useState(false);
    const [user, setUser] = useState(false);

    useEffect(() => {
        if (location.state?.repeatOnboarding) {
            setProtection(true);
            window.history.replaceState({}, '')
        }
    }, [location.state])

    // activates the loading screen on change of loadingStatus for loading within routes
    useEffect(async () => {
        if (loadingStatus && !loader) {
            setLoader(true);
        } else if (!loadingStatus && loader) {
            // await sleep(500);
            setLoader(false);
        }
    }, [loadingStatus]);

    // initial wallet loading or creation
    useEffect(async () => {
        console.log("APP wallet", wallet);
        if (loading) {
            setLoadingStatus("LOADING WALLET");
        } else {
            setLoader(false);
        }
    }, [loading]);

    // handle query parameters
    useEffect(() => {
        const ticketIdFromQuery = new URLSearchParams(location?.search).get("ticket");
        const hasCorrectLength = ticketIdFromQuery?.length === 64;
        if (ticketIdFromQuery && hasCorrectLength) {
            setActiveTicket({ id: ticketIdFromQuery });
            history.push("/waitingroom");
        }
    }, []);



    return (
        <AppContext.Provider value={{
            loadingStatus,
            loading: loader,
            protection,
            user,
            playerNumbers,
            activeTicket,
            redeemAll,
            payout,
            setProtection,
            setUser,
            setLoadingStatus,
            setPlayerNumbers,
            setActiveTicket,
            setRedeemAll,
        }}>
            {children}
        </AppContext.Provider>
    );
}

export const useApp = () => {
    const context = useContext(AppContext);
    if (!context) {
        throw new Error("useApp must be used within an AppProvider");
    }
    return context;
};