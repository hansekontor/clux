/**
 * This file is part of the BlockLotto core functionality.
 * 
 * DO NOT EDIT THIS FILE DIRECTLY.
 * Any changes to this file may cause unexpected behavior.
 * Please consult the project maintainers before making modifications.
*/

import React, { createContext, useContext, useEffect, useState } from 'react';

import { useCashTab } from '@core/context/CashTab';
import { useApp } from '@core/context/App';
import { nationalityOptions, residencyOptions } from '@core/constants/geoBlockedOptions';

import { bcrypto, KeyRing } from '@hansekontor/checkout-components';
const { SHA256 } = bcrypto;
import { Modal } from 'antd';


export const OnBoardingContext = createContext();

export const OnBoardingProvider = ({ children }) => {
    const { setProtection, setLoadingStatus } = useApp();

    const [passwordProtection, setPasswordProtection] = useState(true);

    useEffect(() => {
        // remove protections if access allowed
        if (!passwordProtection) {
            console.log("allow access")
            setProtection(false);
        } else {
            setLoadingStatus(false);
        }
    }, [ passwordProtection])

    const handlePasswordSubmit = (e) => {
        e.preventDefault();
        const password = e.target.password.value;
        const passwordBuf = Buffer.from(password, 'utf-8');
        const hashedPassword = bcrypto.SHA256.digest(passwordBuf).toString('hex');

        const expectedHash = "615da616fc5a5bcd93bc21237807c08eeacbe120ca60e0c3e228712be644596d";

        const verified = hashedPassword === expectedHash;
        console.log("pw verified", verified);
        setPasswordProtection(!verified);
    }

    return (
        <OnBoardingContext.Provider value={{
            passwordProtection,
            modalHolder: "",
            handlePasswordSubmit,
        }}>
            {children}
        </OnBoardingContext.Provider>
    )
};

export const useOnBoarding = () => {
    const context = useContext(OnBoardingContext);
    if (!context) {
        throw new Error("useOnBoarding must be used within a OnBoardingProvider");
    }
    return context;
};