/**
 * This file is part of the BlockLotto core functionality.
 * 
 * DO NOT EDIT THIS FILE DIRECTLY.
 * Any changes to this file may cause unexpected behavior.
 * Please consult the project maintainers before making modifications.
*/

import React, { createContext, useContext, useEffect, useState } from 'react';
import { useHistory } from 'react-router-dom';
import BigNumber from 'bignumber.js';

// core functions
import { useCashTab } from '@core/context/CashTab';
import { getWalletState } from '@core/utils/cashMethods'
import { useApp } from '@core/context/App';
import sleep from '@core/utils/sleep';
// tillo functions
import useTillo from '@core/hooks/useTillo';
import { tilloCountryOptions, tilloCurrencyOptions } from '@core/constants/tilloOptions';

export const CashoutContext = createContext();

export function CashoutProvider({ children }) {
    const history = useHistory();
    const { setLoadingStatus } = useApp();
    const { wallet, forceWalletUpdate, addCashout } = useCashTab(); 
    const { slpBalancesAndUtxos } = getWalletState(wallet);
    const {
        tilloStage,
        giftcardAmount,
        tilloBrands,
        tilloSelection, 
        giftcardLink, 
        brandData, 
        filterTilloBrands,
        handleTilloBrandChange,
        getGiftcard,
        setGiftcardAmount,
        setGiftcardLink
     } = useTillo();

    const token = slpBalancesAndUtxos.tokens?.length > 0 ? slpBalancesAndUtxos.tokens[0] : false;
    const balance = token ? new BigNumber({ ...token.balance, _isBigNumber: true }).toNumber() / 100 : 0;

    const [cashoutMethod, setCashoutMethod] = useState("tillo");

    const previousPath = location.state?.returnTo || "/select";

    // force wallet update on cashout
    useEffect(async () => {
        setLoadingStatus("LOADING WALLET");
        await forceWalletUpdate();
        await sleep(3000);
        setLoadingStatus(false);
    }, []);

    const checkBalance = () => {
        const hasSufficientBalance = balance >= minCashoutAmount;
        return hasSufficientBalance;
    }

    const handleBrandSubmit = async (e) => {
        e.preventDefault();

        const brand = e.target.brand.value;

        const link = await getGiftcard(brand);
        setGiftcardLink(link);
    }

    const minCashoutAmount = 10;
    const maxCashoutAmount = balance - (balance % 10);

    return (
        <CashoutContext.Provider
            value={{
                cashoutMethod,
                minCashoutAmount,
                maxCashoutAmount,
                checkBalance,
                tilloStage,
                giftcardAmount,
                giftcardLink,
                tilloCountryOptions,
                tilloCurrencyOptions,
                tilloBrands,
                tilloSelection,
                brandData, 
                setGiftcardAmount,
                setGiftcardLink,
                filterTilloBrands,
                handleTilloBrandChange,
                getGiftcard,
                handleBrandSubmit,
            }}
        >
            {children}
        </CashoutContext.Provider>
    )
}

export const useCashout = () => {
    const context = useContext(CashoutContext);
    if (!context) {
        throw new Error("useCashout must be used within a CashoutProvider");
    }
    return context;
};