// @ts-check

/**
 * This file is part of the BlockLotto core functionality.
 * 
 * DO NOT EDIT THIS FILE DIRECTLY.
 * Any changes to this file may cause unexpected behavior.
 * Please consult the project maintainers before making modifications.
 */

import React, { createContext, useContext, useEffect, useRef, useState } from 'react';
import PropTypes from 'prop-types';
import localforage from 'localforage';
import { createPublicKeyCredentialCreationOptions } from './config/publicKeyCredentialConfig';
import { createPublicKeyRequestOptions } from './config/publicKeyRequestOptions';
import { createAuthenticationHandler } from './config/authentication';

export const AUTH_CONFIG_KEY = 'authenticationConfig';

/**
 * @typedef {Object} Auth
 * @property {boolean} isAuthenticationRequired
 * @property {string} credentialId
 * @property {boolean} isSignedIn
 * @property {boolean} loading
 * @property {() => void} turnOnAuthentication
 * @property {() => void} turnOffAuthentication
 * @property {() => Promise<void>} signUp
 * @property {() => Promise<void>} signIn
 * @property {() => void} signOut
 */


/** @type {React.Context<Auth | null>} */
export const AuthContext = createContext(/** @type {Auth | null} */(null));

/**
 * Auth is a React context provider component that manages
 * global application state and provides it to its child components.
 *
 * @param {{ children: React.ReactNode }} props - The props object.
 * @returns {JSX.Element} A context provider component that wraps its children.
 */
export const AuthProvider = ({ children }) => {

    /** @type {[boolean, (value: boolean) => void]} */
    const [isWebAuthnSupported, setIsWebAuthnSupported] = useState(false);

    /** @type {[boolean, (value: boolean) => void]} */
    const [isAuthenticationRequired, setIsAuthenticationRequired] = useState(false);

    /** @type {[string, (value: string) => void]} */
    const [credentialId, setCredentialId] = useState("");

    /** @type {[boolean, (value: boolean) => void]} */
    const [isSignedIn, setIsSignedIn] = useState(false);

    /** @type {[string, (value: string) => void]} */
    const [userId, setUserId] = useState(Date.now().toString(16));

    /** @type {[boolean, (value: boolean) => void]} */
    const [loading, setLoading] = useState(true);

    // Ref to track if the component is still mounted
    const isMounted = useRef(true);

    /**
     * Asynchronously loads the authentication configuration from local storage.
     *
     * @async
     * @function
     * @returns {Promise<any>} A promise that resolves to the authentication configuration
     *                         retrieved from local storage, or `null` if not found.
     * @throws {Error} Throws an error if there is an issue accessing local storage.
     */
    const loadAuthenticationConfig = async () => {
        // try to load authentication configuration from local storage
        try {
            return await localforage.getItem(AUTH_CONFIG_KEY);
        } catch (err) {
            console.error(
                `Error is localforange.getItem("${AUTH_CONFIG_KEY}") in loadAuthenticationConfig() in AuthProvider()`,
            );
            // Should stop when attempting to read from localstorage failed
            // continuing would prompt user to register new credential
            // that would risk overriding existing credential
            throw err;
        }
    };

    /**
     * Saves the authentication configuration to local storage using localforage.
     *
     * @function
     * @returns {Promise<void>} A promise that resolves when the authentication configuration is successfully saved.
     * @throws {Error} Throws an error if there is an issue saving the configuration to local storage.
     */
    const saveAuthenticationConfig = async () => {
        try {
            await localforage.setItem(AUTH_CONFIG_KEY, {
                isAuthenticationRequired,
                userId,
                credentialId,
            });
        } catch (err) {
            console.error(
                `Error is localforange.setItem("${AUTH_CONFIG_KEY}") in saveAuthenticationConfig() in AuthProvider()`,
            );
            throw err;
        }
    };


    /**
     * Helper function for checking WebAuthn support
     * @returns {Promise<boolean>} - A promise that resolves to whether WebAuthn is supported or not.
     */
    const checkWebAuthnSupport = async () => {
        return await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
    };

    /**
     * Sets the authentication state based on the provided configuration.
     * 
     * @param {Object} config - The authentication configuration object.
     * @param {string} config.userId - The user ID.
     * @param {string} config.credentialId - The credential ID.
     * @param {boolean} config.isAuthenticationRequired - Whether authentication is required.
     */
    const setAuthStateFromConfig = (config) => {
        setUserId(config.userId);
        setCredentialId(config.credentialId);
        setIsAuthenticationRequired(config.isAuthenticationRequired);
    };

    /**
     * Handles visibility change and signs out the user when the app is not visible.
     */
    const handleVisibilityChange = () => {
        const handleDocVisibilityChange = () => {
            if (document.visibilityState !== 'visible') {
                setIsSignedIn(false);
            }
        };
        document.addEventListener('visibilitychange', handleDocVisibilityChange);
    };

    useEffect(() => {
        // Cleanup function to set isMounted to false when the component unmounts
        return () => {
            isMounted.current = false;
        };
    }, []); // Runs once on mount

    /**
     * The `useEffect` hook to initialize authentication and handle WebAuthn support, configuration loading, and visibility change.
     * This hook runs only once when the component mounts.
     * 
     * - It checks if WebAuthn is supported on the device.
     * - It attempts to load the authentication configuration from local storage.
     * - If the config is not found, it saves the default configuration.
     * - If the config is found, it updates the authentication state.
     * - It also sets up a listener to sign the user out when the app is not visible (e.g., when the browser tab is minimized).
     *
     * @returns {void} This function doesn't return anything.
     */
    useEffect(() => {
        /**
         * Initializes authentication by checking WebAuthn support, loading the config, and handling visibility changes.
         * 
         * @returns {Promise<void>} This function is asynchronous and returns a promise.
         */
        const initializeAuth = async () => {
            // Check if WebAuthn is supported on the user's device
            const available = await checkWebAuthnSupport();
            
            if (isMounted.current) {
                // If WebAuthn is supported, load the authentication config from local storage
                if (available) {
                    const authenticationConfig = await loadAuthenticationConfig();

                    // If no config exists, save the default configuration
                    if (authenticationConfig === null) {
                        saveAuthenticationConfig();
                    } else {
                        // If config is found, set authentication state from the config
                        setAuthStateFromConfig(authenticationConfig);
                    }
                }
            }

            // Set the state to reflect whether WebAuthn is supported
            setIsWebAuthnSupported(available);

            // Stop the loading state
            setLoading(false);

            // Handle visibility change events (sign out when app is not visible)
            handleVisibilityChange();
        };

        // Call the initializeAuth function to run the authentication setup
        initializeAuth();

        // Clean up function for removing the visibility change listener
        return () => {
            document.removeEventListener('visibilitychange', handleVisibilityChange);
        };
    }, []); // Empty dependency array to ensure this effect runs only once on mount


    /**
     * `useEffect` hook to save authentication configuration whenever `isAuthenticationRequired` or `credentialId` changes.
     * 
     * This effect ensures that the authentication configuration is saved to persistent storage
     * whenever the `isAuthenticationRequired` or `credentialId` state variables change.
     * 
     * @async
     * @function saveConfig
     * @returns {Promise<void>} A promise that resolves when the authentication configuration is saved.
     */
    useEffect(() => {
        /**
         * Function to save authentication configuration if `isAuthenticationRequired` is defined.
         * 
         * @async
         * @function saveConfig
         * @returns {Promise<void>} Resolves when the configuration is saved.
         */
        const saveConfig = async () => {
            if (isAuthenticationRequired === undefined) return;
            await saveAuthenticationConfig();
        };

        // Call the saveConfig function when `isAuthenticationRequired` or `credentialId` changes
        saveConfig();

    }, [isAuthenticationRequired, credentialId]);


    /**
     * Creates the public key credential creation options for WebAuthn.
     */
    const publicKeyCredentialCreationOptions = createPublicKeyCredentialCreationOptions(userId);

    /**
     * Creates the public key credential request options for WebAuthn.
     */
    const publicKeyCredentialRequestOptions = createPublicKeyRequestOptions(credentialId);


    /**
     * Creates the authentication handler for managing user sign-up, sign-in, and sign-out.
     */
    const authentication = createAuthenticationHandler({
        isAuthenticationRequired,
        credentialId,
        isSignedIn,
        loading,
        setIsAuthenticationRequired,
        setIsSignedIn,
        setCredentialId,
        publicKeyCredentialCreationOptions,
        publicKeyCredentialRequestOptions,
    });

    /**
     * Determines whether Web Authentication (WebAuthn) support is available and whether authentication is required.
     * If WebAuthn is supported and authentication is required, the `authentication` object is used.
     * If WebAuthn is not supported or authentication is not required, `null` is assigned to `webAuth`.
     * 
     * Web Authentication support may become unavailable for various reasons, such as hardware failure, OS problems,
     * or certain authenticator behaviors after several failed authentication attempts. In such cases, if the user has 
     * previously enabled the authentication lock, the wallet is locked to protect it. If WebAuthn is unavailable and 
     * the authentication lock is not required, the wallet will not be locked, and a malicious user could potentially 
     * disable the platform authenticator to gain access.
     * 
     * @type {null | Object} The `authentication` object or `null` based on WebAuthn support and authentication requirements.
     */
    const webAuth = !isWebAuthnSupported && !isAuthenticationRequired
        ? null
        : authentication;

    return (
        <AuthContext.Provider value={webAuth}>
            {children}
        </AuthContext.Provider>
    );
};

AuthProvider.propTypes = {
    children: PropTypes.node.isRequired,
};

/**
 * Custom hook to access the Auth context.
 * @returns {Auth}
 */
export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error("useAuth must be used within an AuthProvider");
    }
    return context;
};