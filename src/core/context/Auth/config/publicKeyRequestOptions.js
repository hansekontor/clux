// @ts-check
import { convertBase64ToArrayBuffer } from "../../../utils/convertArrBuffBase64";

/**
 * Generates PublicKeyCredentialRequestOptions for WebAuthn authentication.
 * 
 * These options are used to initiate the request for an existing public key credential for the user.
 * The options specify the challenge, allowed credentials, timeout, and other configuration settings
 * for the WebAuthn authentication flow.
 * 
 * @param {string} credentialId - The credential ID of the existing user credential, in Base64 format.
 * @returns {PublicKeyCredentialRequestOptions} - The WebAuthn PublicKeyCredentialRequestOptions object.
 */
export const createPublicKeyRequestOptions = (credentialId) => {
    return {
        /**
         * A challenge generated by the server to prevent replay attacks.
         * This should be a random, unique string. For now, it's hardcoded, but we should 
         * consider generating a random string and verifying it against the response from the authenticator.
         * 
         * @type {Uint8Array}
         */
        challenge: Uint8Array.from('cashtab-wallet-for-ecash', c => c.charCodeAt(0)),

        /**
         * Timeout for the WebAuthn operation. If the operation takes longer than this time, it will be aborted.
         * 
         * @type {number}
         * @default 60000 (60 seconds)
         */
        timeout: 60000,

        /**
         * Credentials that are allowed for the authentication request.
         * The credentialId is used here and converted to an ArrayBuffer.
         * 
         * @type {Array<PublicKeyCredentialDescriptor>}
         */
        allowCredentials: [
            {
                type: 'public-key',
                // The credentialId is stored as base64, so it needs to be converted to an ArrayBuffer
                id: convertBase64ToArrayBuffer(credentialId),
                transports: ['internal'],
            },
        ],

        /**
         * User verification requirement. In this case, it is set to 'required'.
         * This means that the authenticator must verify the user before completing the authentication process.
         * 
         * @type {UserVerificationRequirement}
         */
        userVerification: 'required',

        /**
         * Optional extensions that can be included with the credential request.
         * Extensions provide additional capabilities for the WebAuthn protocol.
         * 
         * @type {Object}
         * @default {}
         */
        extensions: {},
    };
};