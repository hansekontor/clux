// @ts-check
import { currency } from '../../../utils/ticker';

/**
 * Create options for PublicKeyCredentialCreation used in WebAuthn authentication.
 * 
 * These options are used to initiate the creation of a new public key credential for the user.
 * The options provide details like the challenge, relying party (rp), user details, 
 * public key credential parameters, and other configuration settings for the WebAuthn authentication flow.
 * 
 * @param {string} userId - The ID of the user to be registered.
 * @returns {PublicKeyCredentialCreationOptions} The configuration object for credential creation.
 */
export const createPublicKeyCredentialCreationOptions = (userId) => {
    return {
        /**
         * A challenge generated by the server to prevent replay attacks.
         * This should be a random, unique string. For now, it's hardcoded, but we should 
         * consider generating a random string and verifying it against the response from the authenticator.
         * 
         * @type {Uint8Array}
         */
        challenge: Uint8Array.from('cashtab-wallet-for-ecash', c => c.charCodeAt(0)),

        /**
         * Relying Party (RP) details. This is the entity requesting the authentication.
         * 
         * @type {PublicKeyCredentialRpEntity}
         */
        rp: {
            name: currency.name,  // Name of the currency (RP name)
            id: window.location.hostname,  // Domain of the current document (RP ID)
        },

        /**
         * User details for the account to be registered.
         * User ID is converted into a Uint8Array.
         * 
         * @type {PublicKeyCredentialUserEntity}
         */
        user: {
            id: Uint8Array.from(userId, c => c.charCodeAt(0)),  // User ID as a Uint8Array
            name: `Local User`,  // Display name of the user
            displayName: 'Local User',  // The name displayed to the user during the authentication process
        },

        /**
         * The public key credential parameters specifying the algorithms to use.
         * These are specific to the platform and security level.
         * 
         * @type {Array<PublicKeyCredentialParameters>}
         */
        pubKeyCredParams: [
            { alg: -7, type: 'public-key' },   // ES256 algorithm
            { alg: -35, type: 'public-key' },  // RS1 algorithm
            { alg: -36, type: 'public-key' },  // RS256 algorithm
            { alg: -257, type: 'public-key' }, // ECDSA with P-384 curve
            { alg: -258, type: 'public-key' }, // ECDSA with P-521 curve
            { alg: -259, type: 'public-key' }, // ECDSA with P-256 curve
            { alg: -37, type: 'public-key' },  // EdDSA algorithm
            { alg: -38, type: 'public-key' },  // Ed25519 algorithm
            { alg: -39, type: 'public-key' },  // Ed448 algorithm
            { alg: -8, type: 'public-key' },   // RS384 algorithm
        ],

        /**
         * Selection criteria for the authenticator.
         * This defines the expected authenticator behavior.
         * 
         * @type {AuthenticatorSelectionCriteria}
         */
        authenticatorSelection: {
            userVerification: 'required',   // Ensure user verification is required during authentication
            authenticatorAttachment: 'platform',  // Specify platform attachment for the authenticator
            requireResidentKey: false,     // Do not require a resident key for this credential
        },

        /**
         * Timeout for the WebAuthn operation. If the operation takes longer than this time, it will be aborted.
         * 
         * @type {number}
         * @default 60000 (60 seconds)
         */
        timeout: 60000,  // 60 seconds timeout for credential creation

        /**
         * Attestation conveyance preference. 'none' means the server does not require attestation.
         * 
         * @type {AttestationConveyancePreference}
         * @default 'none'
         */
        attestation: 'none',

        /**
         * List of credentials that should be excluded from the credential creation process.
         * This is typically used to prevent duplicate credentials.
         * 
         * @type {Array<PublicKeyCredentialDescriptor>}
         */
        excludeCredentials: [],  // Empty for now, can be populated if needed.

        /**
         * Optional extensions that can be included with the credential creation request.
         * Extensions provide additional capabilities for the WebAuthn protocol.
         * 
         * @type {Object}
         * @default {}
         */
        extensions: {},  // No extensions used for now
    };
};